<File version="3.1">
  <FileID>4c719271-c393-47f5-a5cc-c351f7a4f4a8</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAH38SURBVHhe7f1ncBzJuqYJzp8e21+rxnZt12xs
Zmf/zuyu2drsTE93T4vp27evOOeKU+ec0ixdLGpNkIQmNEBorQFCEgAJQhMAobXWWiSA1JAENUu9
618AyULhZFWBLCYKTL6P2WMZCOHh4ZEI/9wzIvy/IIQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCHmzCPvf/Zf/Zf3vf/e7el//wHofH//6q5RSSil9rfT1Dax3c3Or/3/+d/9d
varbxZ/nX/yLf9Fz4uRp1HcMYXRhDWOL69onpZRSSl8fxxc3MDy/jPyiUvwP/8N/j+1q/qf5u7/7
u4a69kF0TVlQ3zernNn+pJRSSunr4wwaBuYxtLCOsMjYXw4A/PwDGyb0G2qjOTQNzlNKKaX0tXUO
3apBf7e5aw8BgJ9/w7TxvrZhy5DOjgvomjShdXjBzjJKKaX09VPqtLbRRbSNvLySjr35e1btX/Lx
qvJis3fGijt3W345APD19VMBwCaaVUVvy8hOO8b0uFndrn3aW04ppZS+Traryra+ZxoFFZ3IL+94
YfPK2lHaMKhVvOWNQ8grbbO73s/bjhsVHVo+GvvnUFCp8qLStb/uTyt5Kanr/9Hx9c2u7D0AmDHd
R8vwX0YUA/NriEzJxX/93/w/cDUkBoO6tb9YR2wf1WsF2j66pNk2svUp8/5ifW2+Wl/7W02rwKJj
zLC93a51f8If9rN7vuTjh/kyvTvtrf39eD1KKaVvjt2TRq3yr2oaQpP8bt4z9QJOo6V/BjdUxVve
PKoq7TY0q79lvm2dFulRH1St8R22qnk702nsm8ad5mHVwO5B8d1+lNcPoKl/9vlyyVertOi17bfS
k7+bd6wjtgzMokAFE9UdE+gY12vH1z+3ijt1ewwAZs0PVcW8VTHalApyzPAAZy574//8X/1f8NGX
JzBtfbZdqf543bZhnVax2ir8rXkSZf14PU1ZR5Zt/906MIP67nG0qmCgU/1tm/9zto8sPN+PpuRp
3KCl3aoCma358veCKqBJdWwGLW2Z3zoo+5tQ+9uxPaWU0jfGnikTCqu6VV2gKlHV+rZ/Q51965TS
XV9c04tS1fq/pSpw+Vvmy/LGgXmkF1QjMiEXcWlFiE8vUtN5SM2r1Pb1fH8yrYKGWzV9uK0CgNqO
8a1lvbNoUmmUNg4gIfMWopJu4PqtBkSnFCJepXerplst16n1VF2m1pUW/22Vlzvt4+hSgY0c36Bu
HdV1rb8cAFxVAcC85ZGqII3oGv+xY4b7cPMLw//0r/5X/Ot/9x9RryrT/tkVdKrK1rZOj9phTUML
6gZU5drZjpt3utE9Po/yuna0jVvRN7uM3mkLuibUumrb7rEplFY2o21qDX3TOpSUVKL4Tj1uV3eo
9c1qXau2fvekCT0yPbOs9mFS28vfy+ibs+JuYzOq2qfRP7+KbpWu3KPQMTKDktIKlDWNoFtt1zNl
RF1zB26W3UF5wxC61LzusQVUVFejpK4XLSrgkChw5/FSSil1fvumzaqu6kGjtOaHFtCsWtfNqtKV
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
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEvLb8F//F/x/RU0TVyK45dgAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[$buttonTestConnectionping_Click = {
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	#TODO: Place custom script herecls
	$pcname = $textbox1.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 30
		
		#$tet = (Get-WmiObject -Class "win32_PhysicalMemoryArray" -namespace "root\CIMV2" -computerName $pcnamfe).MaxCapacity
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$good = "$pcname is available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $good
			$progressbaroverlay1.Value = 100
		}
	}
}

$buttonИнформацияОПКCheck_L_Click= {
	#TODO: Place custom script here
	$path = "HKLM:\SYSTEM\Migration2021\"
	$key = "loglevel"
	$value = (Get-ItemProperty -path HKLM:\SYSTEM\Migration2021).loglevel
	$pathinfo = Get-Item -Path C:\temp\MigrationLogs\
	$pathinfo2 = Get-Item -Path C:\temp\MigrationLogs\Logs2\
	if ($pathinfo -eq $null)
	{
		New-Item -ItemType Directory -Path C:\temp\MigrationLogs\
	}
	if ($pathinfo2 -eq $null)
	{
		New-Item -ItemType Directory -Path C:\temp\MigrationLogs\Logs2
	}
		Function Test-RegistryValue($regkey, $name)
			{
				$exists = Get-ItemProperty -Path "$regkey" -Name "$name" -ErrorAction SilentlyContinue
				
				If (($exists -ne $null) -and ($exists.Length -ne 0) -and ($value -eq 11))
				{
					Return $true
				}
				Return $false
			}
			if ((Test-RegistryValue $Path $key) -eq $true)
			{
				$pcname = (Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\ComputerName\ComputerName').ComputerName
				$capacityText = "Capacity:"
				$capacity = (Get-WmiObject -Class "win32_PhysicalMemoryArray" -namespace "root\CIMV2").MaxCapacity
				$productname = "Product Name: "
				$product = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion').ProductName
				$versionname = "OS Version: "
				$displayVersion = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion').DisplayVersion
				$softwarename = "Software is: "
				$software = $VirtualSoftware = (Get-ChildItem -Path 'HKLM:\\SOFTWARE\' | Where-Object { $_.Name -like "*ORACLE*" -or $_.Name -like "VMware*" })
				$richtextbox1.SelectedText = [System.Environment]::NewLine
				$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
				$richtextbox1.SelectedText += $pcname
				$richtextbox1.SelectedText = [System.Environment]::NewLine
				$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
				$richtextbox1.SelectedText += $capacityText
				$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
				$richtextbox1.SelectedText += $capacity
				$richtextbox1.SelectedText = [System.Environment]::NewLine
				$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
				$richtextbox1.SelectedText += $product
				$richtextbox1.SelectedText = [System.Environment]::NewLine
				$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
				$richtextbox1.SelectedText += $versionname
				$richtextbox1.SelectedText = [System.Environment]::NewLine
				$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
				$richtextbox1.SelectedText += $displayVersion
			
				$exists = (Get-ChildItem -Path 'HKLM:\\SOFTWARE\' | Where-Object { $_.Name -like "*orac*" -or $_.Name -like "VMware*" })
				if ($exists -ne $null)
				{
			$good = "Software found on $pcname"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $good
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $softwarename
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $software
				}
				else
				{
					Add-Type -AssemblyName PresentationCore, PresentationFramework
					$msgBody = "No software on this PC. Error 0851"
					[System.Windows.MessageBox]::Show($msgBody)
					
				}
				$USBcount = (Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Enum\USB\').Count
				if ($USBcount -lt 5)
				{
					Add-Type -AssemblyName PresentationCore, PresentationFramework
					$msgBody = "PC does not meet minimum requirements. Error 6328"
					[System.Windows.MessageBox]::Show($msgBody)
					
				}
				else
				{
					$good = "Found $USBcount USB Device(-s) on $pcname"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $good
				}
				$ComCount = (Get-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\COM Name Arbiter\Devices').ValueCount
				if ($ComCount -eq $null)
				{
					Add-Type -AssemblyName PresentationCore, PresentationFramework
					$msgBody = "PC does not meet minimum requirements. Error 9803"
					[System.Windows.MessageBox]::Show($msgBody)
					
				}
				else
				{
					$good = "Found $ComCount COM Device(-s) on $pcname"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $good
				}
				$printerscount = (Get-ChildItem -path 'HKLM:\SYSTEM\CurrentControlSet\Control\Print\Printers').Count
				if ($printerscount -lt 4)
				{
					
					Add-Type -AssemblyName PresentationCore, PresentationFramework
					$msgBody = "PC does not meet minimum requirements. Error 0675"
					[System.Windows.MessageBox]::Show($msgBody)
					
				}
				else
				{
					$good = "Found $printerscount Printers on $pcname"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $good
				}
				$loglevelValue = (Get-ItemProperty 'HKLM:\\SYSTEM\Migration2021').loglevel
				$ipaddress = (Get-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\{042fb097-3efd-4e0a-83ad-6fb13425bd03}').DhcpIpAddress
				$gateway = (Get-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\{042fb097-3efd-4e0a-83ad-6fb13425bd03}').DhcpDefaultGateway
				$subnetmask = (Get-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\{042fb097-3efd-4e0a-83ad-6fb13425bd03}').DhcpSubnetMask
				$printers = (Get-ChildItem -path 'HKLM:\SYSTEM\CurrentControlSet\Control\Print\Printers') | Select-Object Name
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "=========== Check-List Log File ==========="
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "Registry Key loglevel value: $loglevelValue"
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "PC name: $PCname"
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "ProductName: $product "
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "Gateway: $gateway "
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "Ip-address: $ipaddress "
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "Subnet Mask: $subnetmask "
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "Operation system version: $OSVersion"
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "Virtual Software: $VirtualSoftware"
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "Virtual Software Version: $VirtualSoftwareVersion"
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "USB Controllers: $USBcount"
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "COM and LPT device(-s): $ComCount"
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "Printers: $PrintersCount"
				echo $date >> C:\temp\MigrationLogs\Check_List.txt
				Add-Content -Path C:\temp\MigrationLogs\Check_List.txt "=========== Check-List Log File ==========="
		
			}
			
			else
			{
				Add-Type -AssemblyName PresentationCore, PresentationFramework
				$msgBody = "loglevel error.Error 5673"
				[System.Windows.MessageBox]::Show($msgBody)
			}
		}
	<#	else
		{
			New-Item -ItemType Directory -Path C:\temp\MigrationLogs\
		}
		else
		{
			New-Item -ItemType Directory -Path C:\temp\MigrationLogs\Logs2
		}
	}
	
}#>


$buttonОчиститьЛогСобытий_Click={
	#TODO: Place custom script here
	$richtextbox1.Text=""
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Step = 0
}

$buttonPCInformatonlog_Click={
	#TODO: Place custom script here
	$pathinfo = "C:\temp\MigrationLogs\Logs2"
	$parametres = "Press:"
	$1 = "1 for USB detailts *.log"
	$2 = "2 for COM details *.log"
	$3 = "3 for Printers details *.log"
	$4 = "4 for make all files *.log"
	$richtextbox1.SelectedText = [System.Environment]::NewLine
	$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
	$richtextbox1.SelectedText +=$parametres
	$richtextbox1.SelectedText = [System.Environment]::NewLine
	$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
	$richtextbox1.SelectedText += $1
	$richtextbox1.SelectedText = [System.Environment]::NewLine
	$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
	$richtextbox1.SelectedText += $2
	$richtextbox1.SelectedText = [System.Environment]::NewLine
	$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
	$richtextbox1.SelectedText += $3
	$richtextbox1.SelectedText = [System.Environment]::NewLine
	$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
	$richtextbox1.SelectedText += $4
	$parametr = Read-Host "Enter value"
	if ($parametr -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "Bad parametr! Try again!"
		[System.Windows.MessageBox]::Show($msgBody)
	}
	elseif ($parametr -eq 1)
	{
		Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Enum\USB' -Recurse -ErrorAction SilentlyContinue | Out-File C:\temp\MigrationLogs\Logs2\USB.log
		$echo = "Done."
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $echo
	}
	elseif ($parametr -eq 2)
	{
		Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\COM Name Arbiter\' | Out-File C:\temp\MigrationLogs\Logs2\COM.log
		$echo = "Done."
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $echo
	}
	elseif ($parametr -eq 3)
	{
		Get-ChildItem -path 'HKLM:\SYSTEM\CurrentControlSet\Control\Print\Printers' -Recurse -ErrorAction SilentlyContinue | Out-file C:\temp\MigrationLogs\Logs2\Print.log
		$echo = "Done."
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $echo
	}
	elseif ($parametr -eq 4)
	{
		Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Enum\USB' -Recurse -ErrorAction SilentlyContinue | Out-File C:\temp\MigrationLogs\Logs2\USB.log
		Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\COM Name Arbiter\' | Out-File C:\temp\MigrationLogs\Logs2\COM.log
		Get-ChildItem -path 'HKLM:\SYSTEM\CurrentControlSet\Control\Print\Printers' -Recurse -ErrorAction SilentlyContinue | Out-file C:\temp\MigrationLogs\Logs2\Print.log
		$echo = "Done."
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $echo
	}
	<#Function GetUSBInfo()
	{
		Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Enum\USB' -Recurse -ErrorAction SilentlyContinue | Out-File C:\temp\MigrationLogs\Logs2\USB.log
	}
	Function GetCOMInfo()
	{
		Get-ChildItem -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\COM Name Arbiter\' | Out-File C:\temp\MigrationLogs\Logs2\COM.log
	}
	Function GetPrinterInfo()
	{
		Get-ChildItem -path 'HKLM:\SYSTEM\CurrentControlSet\Control\Print\Printers' -Recurse -ErrorAction SilentlyContinue | Out-file C:\temp\MigrationLogs\Logs2\Print.log
	}#>
	
}

$buttonLocalKeyChangeloglev_Click={
	#TODO: Place custom script here
	$path = "HKLM:\SYSTEM\Migration2021\"
	$key = "loglevel"
	$value = (Get-ItemProperty -path HKLM:\SYSTEM\Migration2021).loglevel
	
	Function Test-RegistryValue($regkey, $name)
	{
		$exists = Get-ItemProperty -Path "$regkey" -Name "$name" -ErrorAction SilentlyContinue
		
		If (($exists -ne $null) -and ($value -eq 11))
		{
			Return $true
		}
		Return $true
	}
	if ((Test-RegistryValue $Path $key) -eq $false)
	{
		New-ItemProperty -Path 'HKLM:\SYSTEM\Migration2021\' -Name "loglevel" -Value 11 -PropertyType "string"
		
	}
	
	elseif ((Test-RegistryValue $Path $key) -eq $true)
	{
		Set-ItemProperty -Path "HKLM:\SYSTEM\Migration2021\" -Name "loglevel" -Value 11
		$done = "Change is done"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $done
	}
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	$progressbaroverlay1.Step = 1;
	$progressbaroverlay1.Value = 100;
}

$buttonExit_Click={
	#TODO: Place custom script here
	$MainForm.Close()
}


$buttonClearCTemp_Click={
	#TODO: Place custom script here
	$filescount = (Get-ChildItem -Path C:\Temp).Count
	Add-Type -AssemblyName PresentationCore, PresentationFramework
	$msgBody = "$filescount files will be deleted. Are you sure?"
	$yesno = [System.Windows.MessageBox]::Show("$msgBody", "Status", 4)
	if ($yesno -eq "YES")
	{
		Remove-Item -Path C:\Temp -Recurse -ErrorAction SilentlyContinue -verb runas
		$text = "Cleaning $filescount completed... "
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
	}
	else
	{
		$text2 = "Cleaning has been canceled..."
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text2
	}			
}

$buttonОчиститьКорзину_Click={
	#TODO: Place custom script here
	clearrecyclebin
}
function clearrecyclebin()
{
	$pcname = $textbox1.Text
	$progressbaroverlay1.Minimum = 0
	$progressbaroverlay1.Maximum = 100
	$pcname = $textbox1.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Wait..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 80
			Invoke-Command -ComputerName $pcname -ScriptBlock { Clear-RecycleBin -Confirm -ErrorAction SilentlyContinue -Verb runas }
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 100
			
		}
		
	}
}

$buttonPowershellIse_Click = {
	#TODO: Place custom script here
	services
}
function services()
{
	$progressbaroverlay1.Minimum = 0
	$progressbaroverlay1.Maximum = 100
	$pcname = $textbox1.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Gathering information about services on $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$good = "Search completed."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $good
			$pcname = $textbox1.Text
			$services = Get-WmiObject -Class win32_service -ComputerName $pcname | Out-GridView -Title "$pcname Services" -PassThru | Stop-Service #| Where-Object { $_.status -eq "Running" 
			$text = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text
			$progressbaroverlay1.Value = 100
		}
	}
}
$buttonIPconfigflushdns_Click= {
	#TODO: Place custom script here
	ipconfigflushdns
}
function ipconfigflushdns()
{
	$progressbaroverlay1.Minimum = 0
	$progressbaroverlay1.Maximum = 100
	$pcname = $textbox3.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Value = 20
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Wait..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 70
			Invoke-Command -ComputerName $pcname -ScriptBlock { ipconfig /flushdns }
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 100
			
		}
	}
}


$buttonIPconfigrenew_Click={
	#TODO: Place custom script here
	ipconfigrenew
}

function ipconfigrenew()
{
	$progressbaroverlay1.Minimum = 0
	$progressbaroverlay1.Maximum = 100
	$pcname = $textbox3.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Value = 20
		
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Wait..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 80
			Invoke-Command -ComputerName $pcname -ScriptBlock { ipconfig /renew }
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 100
			
		}
	}
}


$buttonПерезагрузитьПК_Click={
	#TODO: Place custom script here
	rebootpc
}
function rebootpc()
{
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	$pcname = $textbox1.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Value = 30
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Sending $pcname on reboot."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 80
			Invoke-Command -ComputerName $pcname -ScriptBlock { shutdown -r -t 0 }
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Step = 1;
			$progressbaroverlay1.Value = 100;
		}
	}
}



$buttonHardWareInfo_Click={
	#TODO: Place custom script here
	hardwareinfo
	
}
function hardwareinfo()
{
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	
	$namebox = $textbox1.Text
	
	if ($namebox -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	
	else
	{
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$text = "Проверяем доступность $namebox"
		$richtextbox1.SelectedText += $text
		$pp = (ping $namebox -n 1).Count
		if ($pp -le 2)
		{
			$err = "$namebox is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 10
			
		}
		elseif ($pp -ge 2)
		{
			
			
			$name = Invoke-Command -ComputerName $namebox -ScriptBlock { [System.Net.DNS]::GetHostName() }
			$namePC = "Name: $name"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $namePC
			$progressbaroverlay1.Value = 20
			$win32procinfo = (Get-WmiObject -Class win32_processor -ComputerName $namebox).Name #| Format-List Caption, MaxClockSpeed, Name
			$proc = "Processor: $win32procinfo"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $proc
			$progressbaroverlay1.Value = 30
			$pcmodel = (Get-WmiObject -Class win32_computersystem -ComputerName $namebox).Model
			$pcmodel1 = "Model: $pcmodel"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $pcmodel1
			$progressbaroverlay1.Value = 40
			$physmem = (Get-CimInstance win32_computersystem -ComputerName $namebox) | Measure-Object -Property TotalPhysicalMemory -Sum | Foreach { "{0:N2}" -f ([math]::round(($_.Sum / 1GB), 2)) + "GB" }
			$physmem1 = "Physical Memory: $physmem"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $physmem1
			$progressbaroverlay1.Value = 50
			$csize = (Get-CimInstance win32_logicaldisk -ComputerName $namebox) | Select-Object -Index 0 | Measure-Object -Property Size -Sum | Foreach { "{0:N2}" -f ([math]::round(($_.Sum / 1GB), 2)) + "GB" }
			$cfreespace = (Get-CimInstance win32_logicaldisk -ComputerName $namebox) | Select-Object -Index 0 | Measure-Object -Property FreeSpace -Sum | Foreach { "{0:N2}" -f ([math]::round(($_.Sum / 1GB), 2)) + "GB" }
			$cinfo1 = "Disk C FreeSpace\Size: $cfreespace \ $csize"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $cinfo1
			$progressbaroverlay1.Value = 60
			$ostype =
			if ([System.IntPtr]::Size -eq 4)
			{ "32-bit" }
			else
			{ "64-bit" }
			$Os = "OS type: $ostype"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $OS
			$progressbaroverlay1.Value = 80
		}
		$text = "Done."
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 100
	}
}

$buttonПроцессы_Click={
	#TODO: Place custom script here
	processes
	
}
function processes()
{
	$progressbaroverlay1.Minimum = 0
	$progressbaroverlay1.Maximum = 100
	$pcname = $textbox1.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Gathering information about processes on $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$good = "Search completed."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $good
			#Get-WmiObject win32_process -ComputerName $pcname | Select-Object -Property Name,ProcessName, Caption, Path | Out-GridView -Title "$pcname processes" -PassThru | Stop-Process -Force
			Invoke-Command -ComputerName $pcname -ScriptBlock { Get-Process | Select-Object Name } | Out-GridView -Title "$pcname processes" -PassThru | Stop-Process -Force
			$text = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text
			$progressbaroverlay1.Value = 100
			
		}
	}
}
$buttonClearTemporary_Click={
	#TODO: Place custom script here
	cleartemp
	
}
function cleartemp()
{
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	$pcname = $textbox1.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Запускаем очистку файлов C:\Temp на ПК $pcname."
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Step = 1;
		$progressbaroverlay1.Value = 50;
		
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 80
			
		}
		elseif ($pp -ge 2)
		{
			
			Invoke-Command -ComputerName $pcname -ScriptBlock { Get-ChildItem C:\Temp } | Out-GridView -Title "$pcname TemporaryFiles" -PassThru | Remove-Item -Force
			$good = "Cleaning on $pcname completed..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $good
			$progressbaroverlay1.Value = 100
		}
		
	}
}


$buttonMSTSCLocalOnly_Click={
	#TODO: Place custom script here
	Start-Process mstsc -Verb runas
}

$buttonEnableRDPMSTSC_Click= {
	#TODO: Place custom script here
	enablerdpmstsc
}
function enablerdpmstsc()
{
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	
	$pcname = $textbox3.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 30
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Enabling RDP on $pcname."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 60
			$regs = Get-WmiObject -List -Namespace Root\DEFAULT -ComputerName $pcname | Where-Object { $_.Name -eq "StdRegProv" }
			$regs.SetDwordValue($hklm, "system\currentControlSet\Control\Terminal Server", "fDenyTSConnections").uValue -eq 0
			mstsc /admin/v $pcname
			#Invoke-Command -Computername $pcname -ScriptBlock { Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0 }
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 100
		}
	}
}
$buttonУдалениеПрофиляСВыбо_Click = {
	#TODO: Place custom script here
	deleteprofile
}
function deleteprofile()
{
	$pcname = $textbox1.Text
	$progressbaroverlay1.Minimum = 0
	$progressbaroverlay1.Maximum = 100
	$pcname = $textbox1.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Value = 20
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Choose profile for deleting..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 80
			#Invoke-Command -ComputerName $pcname -ScriptBlock { Get-ChildItem C:\Users } | Select-Object Name, LastWriteTime | Out-GridView -Title "$pcname Profiles" -PassThru | Remove-Item -Force -ErrorAction SilentlyContinue
			Get-WmiObject -Class win32_userprofile -ComputerName $pcname | Select-Object LocalPath, LastUseTime, PATH, NameSpace | Out-GridView -Title "$pcname UserProfiles" -PassThru | Remove-Item -Force -ErrorAction SilentlyContinue
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 100
		}
	}
}

$buttonDeletePackageFromDBB_Click={
	#TODO: Place custom script here
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	Invoke-Sqlcmd -ServerInstance "LAPTOP-OFCNGMSO\SQLEXPRESS" -Database "packages" -Query "select * from package" | Select-Object numPKG, namePKG | Out-GridView -PassThru -Title Packages
	$rh = Read-Host "Enter numPKG for delete:"
	Invoke-Sqlcmd -ServerInstance "LAPTOP-OFCNGMSO\SQLEXPRESS" -Database "packages" -Query "delete from package where numPKG=$rh"
	$text = "Packet with id $rh was removed from DB"
	$richtextbox1.SelectedText = [System.Environment]::NewLine
	$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
	$richtextbox1.SelectedText += $text
	$progressbaroverlay1.Step = 1;
	$progressbaroverlay1.Value = 100;
	
	
}


$buttonПерезапускСлужбыSpoo_Click={
	#TODO: Place custom script here
	restartspooler
}
function restartspooler()
{
	$pcname = $textbox2.Text
	$progressbaroverlay1.Minimum = 0
	$progressbaroverlay1.Maximum = 100
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 30
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Останавливаю службу печати на $pcname"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			(Get-WmiObject -Class Win32_Service -Filter "name='Spooler'" -ComputerName $pcname).StopService()
			$text2 = "Очистка очереди печати на $pcname начата"
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 70
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			(Get-WmiObject -Class Win32_Service -Filter "name='Spooler'" -ComputerName $pcname).StartService()
			$text3 = "Очистка очереди печати на $pcname закончена"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text3
			$progressbaroverlay1.Step = 1;
			$progressbaroverlay1.Value = 100;
			
		}
	}
}
$buttonВыключениеПК_Click={
	#TODO: Place custom script here
	shutdownpc
}
function shutdownpc()
{
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	$pcname = $textbox3.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Value = 30
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Sending on $pcname Wake-Off packet."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 80
			Invoke-Command -ComputerName $pcname -ScriptBlock { shutdown -s -t 0 }
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Step = 1;
			$progressbaroverlay1.Value = 100;
		}
	}
}
$button1_Click={
	#TODO: Place custom script here
	$MainForm.Close()
}
$buttonIPconfigregisterdns_Click={
	#TODO: Place custom script here
	ipconfigregisterdns
}
function ipconfigregisterdns()
{
	$progressbaroverlay1.Minimum = 0
	$progressbaroverlay1.Maximum = 100
	$pcname = $textbox3.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Value = 20
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Wait..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 80
			Invoke-Command -ComputerName $pcname -ScriptBlock { ipconfig /registerdns }
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 100
			
		}
	}
}

$buttonTestNetConnectionPhy_Click={
	#TODO: Place custom script here
	testconnetiongping
}
function testconnetiongping ()
{
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	$pcname = $textbox1.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 30
		
		#$tet = (Get-WmiObject -Class "win32_PhysicalMemoryArray" -namespace "root\CIMV2" -computerName $pcnamfe).MaxCapacity
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 10
			
		}
		elseif ($pp -ge 2)
		{
			$good = "$pcname is available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $good
			$progressbaroverlay1.Value = 20
			$rht = Read-Host "Enter port"
			$tncpc = (Test-NetConnection $pcname -Port $rht).ComputerName #| Format-Table ComputerName, RemotePort, TcpTestSucceeded
			$tncpct = "ComputerName: $tncpc"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $tncpct
			$progressbaroverlay1.Value = 40
			$tncrad = (Test-NetConnection $pcname -Port $rht).RemoteAddress
			$tncradt = "RemoteAddress: $tncrad"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $tncradt
			$progressbaroverlay1.Value = 60
			$tncrmp = (Test-NetConnection $pcname -Port $rht).RemotePort
			$tncrmpt = "RemotePort: $tncrmp"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $tncrmpt
			$progressbaroverlay1.Value = 80
			$tcptest = (Test-NetConnection $pcname -Port $rht).TcpTestSucceeded
			$tcptestt = "TcpTestSucceeded: $tcptest"
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $tcptestt
			Write-Progress "Done." -PercentComplete 100
			$text = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text
			$progressbaroverlay1.Value = 100
			
			
		}
	}
}
$buttonLogOffUsersЗавершени_Click={
	#TODO: Place custom script here
	logoffusers
}
function logoffusers()
{
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	$pcname = $textbox1.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 30
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Starting users logoff."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 80
			Invoke-Command -ComputerName $pcname -ScriptBlock { shutdown -l }
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Value = 100
			
		}
	}
}

$buttonОтправкаWakeonlan_Click={
	#TODO: Place custom script here
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	$pcname = $textbox3.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 30
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 20
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Starting sent WOL packet..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 60
			Get-CimInstance -Query 'Select * From Win32_NetworkAdapter Where NetConnectionStatus=2' -ComputerName $pcname | Select-Object -Property Name, Manufacturer, MacAddress| Out-GridView -Title "$pcname MAC" -PassThru | Invoke-WakeOnLan  #-MacAddress $text1 -Verbose
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Value = 100
			
		}
	}				
}

function Invoke-WakeOnLan
{
	param
	(
		
		[Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)]
		[ValidatePattern('^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$')]
		[string[]]$MacAddress
	)
	begin
	{
		$UDPclient = [System.Net.Sockets.UdpClient]::new()
	}
	process
	{
		foreach ($_ in $MacAddress)
		{
			try
			{
				$currentMacAddress = $_	
				$mac = $currentMacAddress -split '[:-]' |
				
				ForEach-Object {
					[System.Convert]::ToByte($_, 16)
				}
				
				$packet = [byte[]]( ,0xFF * 102)
				6 .. 101 | Foreach-Object {
					$packet[$_] = $mac[($_ % 6)]
				}
				$UDPclient.Connect(([System.Net.IPAddress]::Broadcast), 4000)
				$null = $UDPclient.Send($packet, $packet.Length)
				Write-Verbose "Sent wake-on-lan packet to $currentMacAddress..."
			}
			catch
			{
				Write-Warning "Unable to send ${mac}: $_"
			}
		}
	}
	end
	{
		$UDPclient.Close()
		$UDPclient.Dispose()
	}
}
$buttonУстановленноеПО_Click={
	#TODO: Place custom script here
	setupinfo
	
}
function setupinfo()
{
	$pcname = $textbox1.Text
	$progressbaroverlay1.Minimum = 0
	$progressbaroverlay1.Maximum = 100
	$pcname = $textbox1.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 30
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Start scanning...."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			#$name = Get-WmiObject -Class Win32_Product -ComputerName $pcname | Out-String
			#$richtextbox1.SelectedText = [System.Environment]::NewLine
			#$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			#$richtextbox1.SelectedText += $name
			Get-WmiObject -Class Win32_Product -ComputerName $pcname | Select-Object Name, Vendor, Version, Caption | Out-GridView -Title "$pcname Programms" -PassThru
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 100
		}
	}
}
$buttonПолучитьСписокПринте_Click={
	#TODO: Place custom script here
	geptrinters
	
}
function geptrinters()
{
	$progressbaroverlay1.Minimum = 0;
	$progressbaroverlay1.Maximum = 100;
	$pcname = $textbox2.Text
	$richtextbox1.SelectedText += $text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	
	else
	{
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$text = "Проверяем доступность $pcname"
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$text = "Starting scan..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text
			$progressbaroverlay1.Value = 70
			$printers = Invoke-Command -ComputerName $pcname -ScriptBlock { Get-Printer | Format-List Name, DriverName } | Out-String
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $printers
			$text1 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 100
		}
	}
}


$buttonSfcscannow_Click={
	#TODO: Place custom script here
	sfcscannow
}
function sfcscannow ()
{
	$progressbaroverlay1.Minimum = 0
	$progressbaroverlay1.Maximum = 100
	$pcname = $textbox3.Text
	if ($pcname -eq "")
	{
		Add-Type -AssemblyName PresentationCore, PresentationFramework
		$msgBody = "PC name or IP address is empty."
		[System.Windows.MessageBox]::Show("$msgBody")
	}
	else
	{
		$text = "Проверяем доступность $pcname"
		$richtextbox1.SelectedText = [System.Environment]::NewLine
		$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
		$richtextbox1.SelectedText += $text
		$progressbaroverlay1.Value = 20
		
		$pp = (ping $pcname -n 1).Count
		if ($pp -le 2)
		{
			$err = "$pcname is not available..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::Red
			$richtextbox1.SelectedText += $err
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 50
			
		}
		elseif ($pp -ge 2)
		{
			$text1 = "Wait..."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text1
			$progressbaroverlay1.Value = 80
			$prev = [console]::OutputEncoding
			[console]::OutputEncoding = [Text.Encoding]::Unicode
			Invoke-Command -computername $pcname -scriptblock { SFC /scannow | Tee-Object -filepath C:\temp\sfc.txt }
			[console]::OutputEncoding = $prev
			$text2 = "Done."
			$richtextbox1.SelectedText = [System.Environment]::NewLine
			$richtextbox1.SelectionColor = [System.Drawing.Color]::YellowGreen
			$richtextbox1.SelectedText += $text2
			$progressbaroverlay1.Step = 1
			$progressbaroverlay1.Value = 100
			
		}
	}
}

	

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>